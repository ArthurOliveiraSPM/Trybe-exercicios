# FROM httpd:2.4.54
# COPY index.html /usr/local/apache2/htdocs/
# EXPOSE 80
# CMD ["httpd-foreground"]

# FROM httpd:2.4.54
# Vamos come√ßar a constru√ß√£o desta imagem se baseando na imagem j√° existente, chamada httpd, com a tag 2.4.54

# COPY index.html /usr/local/apache2/htdocs/
# Temos uma nova palavra reservada: COPY
# Esta linha vai copiar um arquivo no computador local e coloc√°-lo dentro da imagem, no caminho especificado √† frente.
# Ou seja, a linha vai copiar o arquivo index.html, que est√° na pasta atual da execu√ß√£o do comando docker build, e vai copi√°-lo para o caminho /usr/local/apache2/htdocs/, dentro da imagem!
# Este caminho espec√≠fico √© onde o httpd vai procurar por arquivos HTML a serem servidos.
# Alternativamente pode-se utilizar o comando ADD index.html /usr/local/apache2/htdocs. Nesse caso, n√£o mudaria nada, mas o comando ADD tem duas funcionalidades interessantes, tais como:
# Fazer o download do conte√∫do de uma URL \<src> na pasta de destino \<dest>
# Descompactar automaticamente arquivos compactados de formatos reconhecidos (.tar, .gzip, .bzip2, etc)

# EXPOSE 80
# Temos uma nova palavra reservada: EXPOSE
# Esta linha indica que a imagem poder√° receber conex√µes pelo n√∫mero da porta que for informado;
# Neste caso, indica que a imagem poder√° receber conex√µes na porta 80, que √© a porta padr√£o utilizada pelo httpd.

# CMD ["httpd-foreground"]
# Estamos especificando que o programa httpd-foreground seja executado ao iniciar essa imagem como um container.
# Este programa j√° veio junto com a imagem base, portanto n√£o precisamos nos preocupar.

# /////////// Mais robusto ///////////

# FROM nginx:1.21.3-alpine AS primeiro-estagio
# WORKDIR /site

# COPY config.toml config.toml
# COPY index.html /site/layouts/index.html
# COPY _index.md /site/content/_index.md

# RUN apk add hugo
# RUN hugo --minify --gc
# RUN mv /site/public/* /usr/share/nginx/html

# ENTRYPOINT ["nginx", "-g", "daemon off;"]

# FROM nginx:1.21.3-alpine AS primeiro-estagio

# O FROM j√° √© nosso velho conhecido, mas agora temos um prefixo: AS;
# Considere que durante o build podemos estar em est√°gios diferentes, e neste caso n√≥s acabamos de nomear o est√°gio atual para primeiro-estagio;
# Dar nome aos est√°gios ser√° √∫til para n√≥s mais adiante, por√©m neste caso n√£o tem efeito algum.
# WORKDIR /site

# A palavra reservada WORKDIR indica para o Docker qual √© a pasta atual de trabalho dentro da imagem;
# Ou seja, nas pr√≥ximas a√ß√µes deste build e tamb√©m quando essa imagem for executada como um container, estaremos no caminho especificado pelo WORKDIR.
# Tr√™s linhas com COPY

# Aqui copiamos os tr√™s arquivos no formato de pastas que o Hugo espera que estes arquivos estejam;
# N√£o temos nenhuma novidade no uso do COPY aqui.
# Tr√™s linhas com RUN

# A palavra reservada RUN indica que o comando √† frente deve ser executado imediatamente, durante o processo de build. Logo:
# A primeira linha com RUN instala o ferramenta Hugo na nossa imagem Docker;
# A segunda linha executa o comando hugo ‚Äìminify ‚Äìgc para gerar as p√°ginas finais em HTML, baseados nos arquivos de templates (index.html) e conte√∫dos (_index.md);
# A terceira linha executa o comando mv para mover as p√°ginas resultantes do Hugo para o caminho onde o nginx espera que tenha p√°ginas HTML para serem servidas.
# ENTRYPOINT ["nginx", "-g", "daemon off;"]

# A palavra reservada ENTRYPOINT indica para o Docker qual comando deve ser executado ao iniciar o container.
# ‚ö†Ô∏èImportante: voc√™ pode ter percebido que a fun√ß√£o do ENTRYPOINT parece ser a mesma que o CMD que est√°vamos usando anteriormente ü§î. Essa d√∫vida √© comum e em breve vamos explicar a diferen√ßa de uso entre a fun√ß√£o do ENTRYPOINT e o CMD.

# /////////// Saparando por estagios ///////////

# Primeiro Est√°gio
FROM alpine:3.14 AS primeiro-estagio
WORKDIR /site

COPY config.toml config.toml
COPY index.html /site/layouts/index.html
COPY _index.md /site/content/_index.md

RUN apk add hugo
RUN hugo --minify --gc

# Segundo Est√°gio
FROM nginx:1.21.3-alpine AS segundo-estagio
COPY --from=primeiro-estagio /site/public/ /usr/share/nginx/html
ENTRYPOINT ["nginx", "-g", "daemon off;"]